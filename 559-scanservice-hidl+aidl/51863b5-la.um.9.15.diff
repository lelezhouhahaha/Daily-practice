From 51863b5bf5add93e8f3668962bf82c451d0a00be Mon Sep 17 00:00:00 2001
From: lelezhouhahaha@163.com <zhoulele@meigsmart.com>
Date: Mon, 05 Sep 2022 22:35:28 -0400
Subject: [PATCH] [MC559] [TASKID] 25394 [Description]Simulate scan service demo development [Solution] add scanservice api.

Change-Id: Ic3677406affb01ca453a21c33e4a856bd70e7825
---

diff --git a/device/qcom/bengal/bengal.mk b/device/qcom/bengal/bengal.mk
index 5f5f545..4d578bc 100644
--- a/device/qcom/bengal/bengal.mk
+++ b/device/qcom/bengal/bengal.mk
@@ -88,6 +88,7 @@
 BOARD_AVB_VBMETA_SYSTEM_ROLLBACK_INDEX_LOCATION := 2
 $(call inherit-product, build/make/target/product/gsi_keys.mk)
 endif
+$(call inherit-product, vendor/vendorcode/meig.mk)
 
 BOARD_HAVE_BLUETOOTH := false
 BOARD_HAVE_QCOM_FM := false
diff --git a/vendor/Barcode_Scanning_Service/MeigNativeCameraManager/Android.mk b/vendor/Barcode_Scanning_Service/MeigNativeCameraManager/Android.mk
index ef0a473..aa01cbf 100755
--- a/vendor/Barcode_Scanning_Service/MeigNativeCameraManager/Android.mk
+++ b/vendor/Barcode_Scanning_Service/MeigNativeCameraManager/Android.mk
@@ -16,6 +16,9 @@
 
 include $(CLEAR_VARS)
 
+LOCAL_COPY_HEADERS_TO := libMeigNativeCamera
+LOCAL_COPY_HEADERS    := Camera.h
+
 LOCAL_MODULE    := libMeigNativeCamera
 
 LOCAL_MODULE_TAGS := optional
diff --git a/vendor/vendorcode/hardware/Android.bp b/vendor/vendorcode/hardware/Android.bp
new file mode 100755
index 0000000..9acb67f
--- /dev/null
+++ b/vendor/vendorcode/hardware/Android.bp
@@ -0,0 +1,4 @@
+// Pick up Android.bp in next directory level
+subdirs = [
+    "*"
+]
diff --git a/vendor/vendorcode/hardware/interfaces/Android.bp b/vendor/vendorcode/hardware/interfaces/Android.bp
new file mode 100755
index 0000000..f0d19c2
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/Android.bp
@@ -0,0 +1,9 @@
+// Pick up Android.bp in next directory level
+subdirs = [
+    "*"
+]
+
+hidl_package_root {
+    name: "vendor.scan.hardware",
+    path: "vendor/vendorcode/hardware/interfaces",
+}
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/Android.bp b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/Android.bp
new file mode 100755
index 0000000..3ce7f70
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/Android.bp
@@ -0,0 +1,15 @@
+// This file is autogenerated by hidl-gen -Landroidbp.
+
+hidl_interface {
+    name: "vendor.scan.hardware.scanservice@1.0",
+    root: "vendor.scan.hardware",
+    product_specific: true,
+    srcs: [
+        "IScanService.hal",
+		"IScanServiceCallback.hal",
+    ],
+    interfaces: [
+        "android.hidl.base@1.0",
+    ],
+    gen_java: true,
+}
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/IScanService.hal b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/IScanService.hal
new file mode 100755
index 0000000..92e7cc6
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/IScanService.hal
@@ -0,0 +1,32 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package vendor.scan.hardware.scanservice@1.0;
+import IScanServiceCallback;
+
+interface IScanService {
+    //oemkeys_remap_set(string key_name, string new_key_name) generates (int32_t ret);
+    //oemkeys_wakeup_set(string key_name, int32_t wakeable) generates (int32_t ret);
+    //oemkeys_tp_wakeup(int32_t wakeable) generates (int32_t ret);
+    open(int32_t cameraId, int32_t width, int32_t height, int32_t format);
+    close(int32_t cameraId);
+    resume(int32_t cameraId);
+    suspend(int32_t cameraId);
+    capture(int32_t cameraId);
+    setParameters(int32_t cameraId,int32_t type,int32_t value);
+    move_focus(int32_t cameraId,float value);
+    setScanServiceCallback(IScanServiceCallback callback);
+};
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/IScanServiceCallback.hal b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/IScanServiceCallback.hal
new file mode 100755
index 0000000..b693eb2
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/IScanServiceCallback.hal
@@ -0,0 +1,9 @@
+package vendor.scan.hardware.scanservice@1.0;
+
+interface IScanServiceCallback {
+	oneway onNotify(int32_t deviceId);
+ 	oneway onNotifyCamera0Data(int32_t deviceId);
+	oneway onNotifyCamera1Data(int32_t deviceId);
+	oneway onNotifyCamera2Data(int32_t deviceId);
+	oneway onNotifyExposure(int64_t exposuretime,int32_t iso);
+};
\ No newline at end of file
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/Android.mk b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/Android.mk
new file mode 100755
index 0000000..b41e5e5
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/Android.mk
@@ -0,0 +1,35 @@
+LOCAL_PATH := $(call my-dir)
+include $(CLEAR_VARS)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := vendor.scan.hardware.scanservice@1.0-service
+LOCAL_INIT_RC := vendor.scan.hardware.scanservice@1.0-service.rc
+LOCAL_MODULE_RELATIVE_PATH := hw
+LOCAL_PROPRIETARY_MODULE := true
+LOCAL_SRC_FILES := \
+    ScanService.cpp \
+    service.cpp
+
+LOCAL_SHARED_LIBRARIES := \
+    vendor.scan.hardware.scanservice@1.0 \
+    libbase \
+    libcutils \
+    libhidlbase \
+    libhidltransport \
+    liblog \
+    libutils \
+    libhardware \
+    libui \
+    libcamera2ndk_vendor \
+    libcamera_metadata \
+    libmediandk \
+    libnativewindow \
+    libMeigNativeCamera
+
+LOCAL_CFLAGS += -D__ANDROID_VNDK__
+
+LOCAL_C_INCLUDES := $(LOCAL_PATH) \
+	system/core/include \
+    $(TARGET_OUT_HEADERS)/libMeigNativeCamera \
+
+include $(BUILD_EXECUTABLE)
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/ScanService.cpp b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/ScanService.cpp
new file mode 100755
index 0000000..49eb7c2
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/ScanService.cpp
@@ -0,0 +1,187 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#define LOG_TAG "ScanServiceHidl"
+
+#include "ScanService.h"
+
+#include <log/log.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <fcntl.h>
+#include <errno.h>
+
+namespace vendor {
+namespace scan {
+namespace hardware {
+namespace scanservice {
+namespace V1_0 {
+namespace implementation {
+//sp<IScanServiceCallback> ScanService::mCallback = NULL;
+sp<IScanServiceCallback> mCallback = NULL;
+int32_t mCameraId0 = 0;
+int32_t mCameraId1 = 0;
+int32_t mCameraId2 = 0;
+//static void OnDataCallBackTestCamera0(AImageReader *reader) {
+void OnDataCallBackTestCamera0(AImageReader *reader) {
+	ALOGD("%s: Get camera 0 Capture imge ", __func__);
+	if(mCallback != NULL) {
+ 		//mCallback->onNotify(mCameraId0);
+		mCallback->onNotifyCamera0Data(mCameraId0);
+ 	}
+}
+
+//static void OnDataCallBackTestCamera1(AImageReader *reader) {
+void OnDataCallBackTestCamera1(AImageReader *reader) {
+	ALOGD("%s: Get camera 1 Capture imge ", __func__);
+	if(mCallback != NULL) {
+ 		//mCallback->onNotify(mCameraId1);
+		mCallback->onNotifyCamera1Data(mCameraId1);
+ 	}
+
+}
+
+//static void OnDataCallBackTestCamera2(AImageReader *reader) {
+void OnDataCallBackTestCamera2(AImageReader *reader) {
+	ALOGD("%s: Get camera 2 Capture imge ", __func__);
+	if(mCallback != NULL) {
+ 		//mCallback->onNotify(mCameraId2);
+		mCallback->onNotifyCamera2Data(mCameraId2);
+ 	}
+}
+
+void OnExposureCallback(int64_t exposuretime,int32_t iso) {
+	ALOGD("CCM camera exprosure callback exposuretime=%ld iso=%d .....",exposuretime,iso);
+	if(mCallback != NULL) {
+		mCallback->onNotifyExposure(exposuretime, iso);
+ 	}
+}
+
+Return<void> ScanService::open(int32_t cameraId, int32_t width, int32_t height, int32_t format){
+	ALOGD("%s: cameraId:[ %d ], width:[ %d ] , height:[ %d ] , format:[ %d ] \n", __func__, cameraId, width, height, format);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	switch(cameraId){
+		case 0:
+			mCameraId0 = cameraId;
+			break;
+		case 1:
+			mCameraId1 = cameraId;
+			break;
+		default:
+			mCameraId2 = cameraId;
+			break;
+	}
+	
+	pNode->Open(cameraId, width, height, format);
+	return Void();
+}
+
+Return<void> ScanService::close(int32_t cameraId){
+	ALOGD("%s: cameraId:[ %d ] \n", __func__, cameraId);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	pNode->Close(cameraId);
+	return Void();
+}
+
+Return<void> ScanService::resume(int32_t cameraId){
+	ALOGD("%s: cameraId:[ %d ] \n", __func__, cameraId);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	pNode->Resume(cameraId);
+	return Void();
+}
+
+Return<void> ScanService::suspend(int32_t cameraId){
+	ALOGD("%s: cameraId:[ %d ] \n", __func__, cameraId);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	pNode->Suspend(cameraId);
+	return Void();
+}
+
+Return<void> ScanService::capture(int32_t cameraId){
+	ALOGD("%s: cameraId:[ %d ] \n", __func__, cameraId);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	/*switch(cameraId){
+		case 0:
+			pNode->Capture(cameraId, OnDataCallBackTestCamera0);
+			break;
+		case 1:
+			pNode->Capture(cameraId, OnDataCallBackTestCamera1);
+			break;
+		default:
+			pNode->Capture(cameraId, OnDataCallBackTestCamera2);
+			break;
+	}*/
+	pNode->CaptureByCustomer(OnDataCallBackTestCamera1, OnDataCallBackTestCamera2, OnExposureCallback, OnDataCallBackTestCamera0);
+	return Void();
+}
+
+Return<void> ScanService::setParameters(int32_t cameraId,int32_t type,int32_t value){
+	ALOGD("%s: cameraId:[ %d ] type:[ %d ] value:[%d]\n", __func__, cameraId, type, value);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	pNode->SetParameters(cameraId, (camera_parameters_type)type, value);
+	return Void();
+}
+
+Return<void> ScanService::move_focus(int32_t cameraId,float value){
+	ALOGD("%s: cameraId:[ %d ] value:[ %f ]\n", __func__, cameraId, value);
+	if( pNode == NULL){
+		ALOGD("%s: pNode == NULL, and exit!", __func__);
+		return Void();
+	}
+	pNode->MoveFocus(cameraId, value);
+	return Void();
+}
+
+Return<void> ScanService::setScanServiceCallback(const sp<IScanServiceCallback>& callback){
+	if(mCallback == NULL) {
+		ALOGD("setCallback: EXIT! mCallback == NULL");
+ 	}
+	ALOGD("%s: ", __func__);
+
+	mCallback = callback;
+	return Void();
+}
+
+ScanService::ScanService() {
+	ALOGD("%s, start",  __func__);
+	CreateCameraInterfaceNode(&pNode);
+}
+
+}  // namespace implementation
+}  // namespace V1_0
+}  // namespace ScanService
+}  // namespace hardware
+}  // namespace meig
+}  // namespace vendor
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/ScanService.h b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/ScanService.h
new file mode 100755
index 0000000..63f408e
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/ScanService.h
@@ -0,0 +1,65 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#ifndef ANDROID_HARDWARE_SCANSERVICE_V1_0_SCANSERVICE_H
+#define ANDROID_HARDWARE_SCANSERVICE_V1_0_SCANSERVICE_H
+
+#include <vendor/scan/hardware/scanservice/1.0/IScanService.h>
+#include <vendor/scan/hardware/scanservice/1.0/IScanServiceCallback.h>
+//#include <vendor/meig/hardware/scanservice/1.0/types.h>
+#include <libMeigNativeCamera/Camera.h>
+
+namespace vendor {
+namespace scan {
+namespace hardware {
+namespace scanservice {
+namespace V1_0 {
+namespace implementation {
+
+using ::vendor::scan::hardware::scanservice::V1_0::IScanService;
+using ::vendor::scan::hardware::scanservice::V1_0::IScanServiceCallback;
+//using ::vendor::scan::hardware::scanservice::V1_0::types;
+using ::android::hardware::hidl_array;
+using ::android::hardware::hidl_memory;
+using ::android::hardware::hidl_string;
+using ::android::hardware::hidl_vec;
+using ::android::hardware::Return;
+using ::android::hardware::Void;
+using ::android::sp;
+
+struct ScanService : public IScanService {
+    //Return<int32_t> oemkeys_remap_set(const hidl_string& key_name, const hidl_string& new_key_name) override;
+    //Return<int32_t> oemkeys_wakeup_set(const hidl_string& key_name,  int32_t wakeable) override;
+    //Return<int32_t> oemkeys_tp_wakeup(int32_t wakeable) override;
+	ScanService();
+	Return<void> open(int32_t cameraId, int32_t width, int32_t height, int32_t format) override;
+	Return<void> close(int32_t cameraId) override;
+    Return<void> resume(int32_t cameraId) override;
+    Return<void> suspend(int32_t cameraId) override;
+    Return<void> capture(int32_t cameraId) override;
+    Return<void> setParameters(int32_t cameraId, int32_t type, int32_t value) override;
+    Return<void> move_focus(int32_t cameraId,float value) override;
+	Return<void> setScanServiceCallback(const sp<IScanServiceCallback>& callback) override;
+	CameraContrlNode *pNode = NULL;
+};
+
+}  // namespace implementation
+}  // namespace V1_0
+}  // namespace oemkeys
+}  // namespace hardware
+}  // namespace elo
+}  // namespace vendor
+
+#endif  // ANDROID_HARDWARE_OEMKEYS_V1_0_OEMKEYS_H
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/service.cpp b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/service.cpp
new file mode 100755
index 0000000..75b07eb
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/service.cpp
@@ -0,0 +1,43 @@
+/*
+ * Copyright (C) 2016 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+#define LOG_TAG "vendor.scan.hardware.scanservice@1.0-service"
+
+#include <hidl/HidlSupport.h>
+#include <hidl/HidlTransportSupport.h>
+
+#include "ScanService.h"
+
+using ::android::hardware::configureRpcThreadpool;
+using ::vendor::scan::hardware::scanservice::V1_0::IScanService;
+using ::vendor::scan::hardware::scanservice::V1_0::implementation::ScanService;
+using ::android::hardware::joinRpcThreadpool;
+using ::android::OK;
+using ::android::sp;
+
+
+int main(int /* argc */, char* /* argv */ []) {
+    sp<IScanService> scanservice = new ScanService;
+	ALOGE("zll scanservice.");
+    configureRpcThreadpool(1, true /* will join */);
+    if (scanservice->registerAsService() != OK) {
+        ALOGE("Could not register service.");
+        return 1;
+    }
+    joinRpcThreadpool();
+
+    ALOGE("Service exited!");
+    return 1;
+}
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/vendor.scan.hardware.scanservice@1.0-service.rc b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/vendor.scan.hardware.scanservice@1.0-service.rc
new file mode 100755
index 0000000..8c00669
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/1.0/default/vendor.scan.hardware.scanservice@1.0-service.rc
@@ -0,0 +1,5 @@
+service vendor.scanservice-1-0 /vendor/bin/hw/vendor.scan.hardware.scanservice@1.0-service
+    class hal
+    user system
+    group system
+
diff --git a/vendor/vendorcode/hardware/interfaces/scanservice/Android.bp b/vendor/vendorcode/hardware/interfaces/scanservice/Android.bp
new file mode 100755
index 0000000..bbb3e4b
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/scanservice/Android.bp
@@ -0,0 +1,4 @@
+// This is an autogenerated file, do not edit.
+subdirs = [
+    "1.0",
+]
diff --git a/vendor/vendorcode/hardware/interfaces/update-makefiles.sh b/vendor/vendorcode/hardware/interfaces/update-makefiles.sh
new file mode 100755
index 0000000..a2e95c0
--- /dev/null
+++ b/vendor/vendorcode/hardware/interfaces/update-makefiles.sh
@@ -0,0 +1,8 @@
+#!/bin/bash
+
+source $ANDROID_BUILD_TOP/system/tools/hidl/update-makefiles-helper.sh
+
+do_makefiles_update \
+  "vendor.meig.hardware:vendor/vendorcode/hardware/interfaces" \
+  "android.hidl:system/libhidl/transport"
+
diff --git a/vendor/vendorcode/manifest-base-oem.xml b/vendor/vendorcode/manifest-base-oem.xml
new file mode 100755
index 0000000..5c757cb
--- /dev/null
+++ b/vendor/vendorcode/manifest-base-oem.xml
@@ -0,0 +1,39 @@
+<!-- Copyright (c) 2020, The Linux Foundation. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are
+met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above
+      copyright notice, this list of conditions and the following
+      disclaimer in the documentation and/or other materials provided
+      with the distribution.
+    * Neither the name of The Linux Foundation nor the names of its
+      contributors may be used to endorse or promote products derived
+      from this software without specific prior written permission.
+
+THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+-->
+<manifest version="1.0" type="framework">
+    <!-- 20200825, Snail.Qian, add for scan service hal interfaces -->
+    <hal format="hidl">
+        <name>vendor.scan.hardware.scanservice</name>
+        <transport>hwbinder</transport>
+        <version>1.0</version>
+        <interface>
+            <name>IScanService</name>
+            <instance>default</instance>
+        </interface>
+    </hal>
+</manifest>
diff --git a/vendor/vendorcode/meig.mk b/vendor/vendorcode/meig.mk
new file mode 100755
index 0000000..1493b68
--- /dev/null
+++ b/vendor/vendorcode/meig.mk
@@ -0,0 +1,6 @@
+
+
+DEVICE_FRAMEWORK_MANIFEST_FILE += vendor/vendorcode/manifest-base-oem.xml
+BOARD_SEPOLICY_DIRS += $(TOPDIR)vendor/vendorcode/sepolicy
+PRODUCT_PACKAGES += vendor.scan.hardware.scanservice@1.0-service
+
diff --git a/vendor/vendorcode/sepolicy/attributes b/vendor/vendorcode/sepolicy/attributes
new file mode 100755
index 0000000..f6a8fbf
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/attributes
@@ -0,0 +1,7 @@
+#20220825, add for scanservice
+attribute hal_scanservice;
+expandattribute hal_scanservice true;
+attribute hal_scanservice_client;
+expandattribute hal_scanservice_client true;
+attribute hal_scanservice_server;
+expandattribute hal_scanservice_server false;
diff --git a/vendor/vendorcode/sepolicy/file.te b/vendor/vendorcode/sepolicy/file.te
new file mode 100755
index 0000000..0fd4cb8
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/file.te
@@ -0,0 +1,6 @@
+#OEM, Coco.KX.Wang, 20200416, add keys remap and wakeup
+type sysfs_keys_remap, sysfs_type, fs_type;
+
+#OEM, Coco.KX.Wang, 20200825, add for tp wakeup interface
+type sysfs_tp_wakeup, sysfs_type, fs_type;
+type keys_remap_data, file_type, data_file_type, core_data_file_type;
diff --git a/vendor/vendorcode/sepolicy/file_contexts b/vendor/vendorcode/sepolicy/file_contexts
new file mode 100755
index 0000000..6f4ec15
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/file_contexts
@@ -0,0 +1,6 @@
+###################################
+# Dev nodes
+#
+#20200413,Snail.Qian, add for oem keys
+/(vendor|system/vendor)/bin/hw/vendor\.scan\.hardware\.scanservice@1\.0-service       u:object_r:hal_scanservice_default_exec:s0
+
diff --git a/vendor/vendorcode/sepolicy/hal_scanservice.te b/vendor/vendorcode/sepolicy/hal_scanservice.te
new file mode 100755
index 0000000..ea333aa
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/hal_scanservice.te
@@ -0,0 +1,6 @@
+# HwBinder IPC from client to server, and callbacks
+binder_call(hal_scanservice_client, hal_scanservice_server)
+binder_call(hal_scanservice_server, hal_scanservice_client)
+
+add_hwservice(hal_scanservice_server, hal_scanservice_hwservice)
+allow hal_scanservice_client hal_scanservice_hwservice:hwservice_manager find;
diff --git a/vendor/vendorcode/sepolicy/hal_scanservice_default.te b/vendor/vendorcode/sepolicy/hal_scanservice_default.te
new file mode 100755
index 0000000..1def5ae
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/hal_scanservice_default.te
@@ -0,0 +1,14 @@
+type hal_scanservice_default, domain;
+hal_server_domain(hal_scanservice_default, hal_scanservice)
+
+type hal_scanservice_default_exec, exec_type, vendor_file_type, file_type;
+init_daemon_domain(hal_scanservice_default)
+
+#OEM, Coco.KX.Wang, 20200416, add keys remap and wakeup
+#allow hal_oemkeys_default sysfs_keys_remap:file { w_file_perms };
+
+#OEM, Coco.KX.Wang, 20200825, add for tp wakeup interface
+#allow hal_scanservice_default sysfs_tp_wakeup:file { w_file_perms };
+
+# modify for task 22637, add wake up feature
+#allow hal_scanservice_default proc:file { open write };
diff --git a/vendor/vendorcode/sepolicy/hwservice.te b/vendor/vendorcode/sepolicy/hwservice.te
new file mode 100755
index 0000000..2a66f25
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/hwservice.te
@@ -0,0 +1,3 @@
+#20220825
+type hal_scanservice_hwservice, hwservice_manager_type;
+
diff --git a/vendor/vendorcode/sepolicy/hwservice_contexts b/vendor/vendorcode/sepolicy/hwservice_contexts
new file mode 100755
index 0000000..1b332fe
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/hwservice_contexts
@@ -0,0 +1,2 @@
+#20200825,Snail.Qian, add for scan service
+vendor.scan.hardware.scanservice::IScanService                   u:object_r:hal_scanservice_hwservice:s0
diff --git a/vendor/vendorcode/sepolicy/system_server.te b/vendor/vendorcode/sepolicy/system_server.te
new file mode 100755
index 0000000..9fde810
--- /dev/null
+++ b/vendor/vendorcode/sepolicy/system_server.te
@@ -0,0 +1,3 @@
+#20220825 scan service
+hal_client_domain(system_server, hal_scanservice)
+
